You are given two strings of equal lengths, s1 and s2. The task is to check if s2 is a rotated version of the string s1.
Note: The characters in the strings are in lowercase.

Examples :
Input: s1 = "abcd", s2 = "cdab"
Output: true
Explanation: After 2 right rotations, s1 will become equal to s2.

Solution:
class Solution {
    public static boolean areRotations(String s1, String s2) {
        // Check if lengths are equal
        if (s1.length() != s2.length()) {
            return false;
        }

        // Concatenate s1 with itself
        String combined = s1 + s1;

        // Use KMP to check if s2 is a substring of combined
        return kmpSearch(combined, s2);
    }

    // KMP Algorithm to check if pattern (s2) is in text (combined)
    private static boolean kmpSearch(String text, String pattern) {
        int[] lps = computeLPSArray(pattern); // Preprocess the pattern
        
        int i = 0; // Pointer for text
        int j = 0; // Pointer for pattern
        
        while (i < text.length()) {
            if (text.charAt(i) == pattern.charAt(j)) {
                i++;
                j++;
                if (j == pattern.length()) {
                    return true; // Found pattern
                }
            } else {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }
        return false;
    }

    // Compute the Longest Prefix Suffix (LPS) array for the KMP algorithm
    private static int[] computeLPSArray(String pattern) {
        int[] lps = new int[pattern.length()];
        int length = 0;
        int i = 1;
        
        while (i < pattern.length()) {
            if (pattern.charAt(i) == pattern.charAt(length)) {
                length++;
                lps[i] = length;
                i++;
            } else {
                if (length != 0) {
                    length = lps[length - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }
}
