class Solution {
    int countFreq(int[] arr, int target) {
        // Find the first occurrence of the target
        int first = findFirstOccurrence(arr, target);
        
        // If the target is not present in the array, return 0
        if (first == -1) {
            return 0;
        }
        
        // Find the last occurrence of the target
        int last = findLastOccurrence(arr, target);
        
        // The count of the target is the difference between the indices of
        // the last and first occurrence, plus 1
        return last - first + 1;
    }
    
    // Helper function to find the first occurrence of the target
    int findFirstOccurrence(int[] arr, int target) {
        int left = 0, right = arr.length - 1;
        int result = -1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (arr[mid] == target) {
                result = mid;
                right = mid - 1; // Move left to find the first occurrence
            } else if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return result;
    }
    
    // Helper function to find the last occurrence of the target
    int findLastOccurrence(int[] arr, int target) {
        int left = 0, right = arr.length - 1;
        int result = -1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (arr[mid] == target) {
                result = mid;
                left = mid + 1; // Move right to find the last occurrence
            } else if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return result;
    }
}
