Given a Binary Tree and an integer target. Find all the ancestors of the given target.
Note:
The ancestor of node x is node y, which is at the upper level of node x, and x is directly connected with node y. Consider multiple levels of ancestors to solve this problem.
In case there are no ancestors available, return an empty list.
Examples:
Input:
         1
       /   \
      2     3
    /  \    /  \
   4   5  6   8
  /
 7
target = 7
Output: [4 2 1]
Explanation: The given target is 7, if we go above the level of node 7, then we find 4, 2 and 1. Hence the ancestors of node 7 are 4 2 and 1

Solution:

class Solution {
public:
    // Helper function to find ancestors
    bool findAncestors(Node* root, int target, vector<int>& ancestors) {
        if (root == NULL) {
            return false;
        }
        
        if (root->data == target) {
            return true;
        }
        
        if (findAncestors(root->left, target, ancestors) || findAncestors(root->right, target, ancestors)) {
            ancestors.push_back(root->data);
            return true;
        }
        
        return false;
    }

    // Function to return all the ancestors of the target node
    vector<int> Ancestors(Node* root, int target) {
        vector<int> ancestors;
        if (root->data != target) {
            findAncestors(root, target, ancestors);
        }
        return ancestors;
    }
};
