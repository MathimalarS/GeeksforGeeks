Given a doubly Linked list and a position. The task is to delete a node from a given position (position starts from 1) in a doubly linked list and return the head of the doubly Linked list.

Examples:

Input: LinkedList = 1 <--> 3 <--> 4, x = 3
Output: 1 3  
Explanation: 
After deleting the node at position 3 (position starts from 1),the linked list will be now as 1 <--> 3.

Solution:

class Solution{
public:
Node* deleteNode(Node* head, int position) {
    if (head == nullptr) return nullptr;

    Node* current = head;

    if (position == 1) {
        head = current->next;
        if (head != nullptr) {
            head->prev = nullptr;
        }
        delete current;
        return head;
    }

    for (int i = 1; current != nullptr && i < position; i++) {
        current = current->next;
    }

    if (current == nullptr) return head;

    if (current->next != nullptr) {
        current->next->prev = current->prev;
    }
    if (current->prev != nullptr) {
        current->prev->next = current->next;
    }

    delete current;
    return head;
}
};
