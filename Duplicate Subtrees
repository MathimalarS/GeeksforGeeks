Given a binary tree, your task is to find all duplicate subtrees from the given binary tree.
Duplicate Subtree : Two trees are duplicates if they have the same structure with the same node values.
Note:  Return the root of each tree in the form of a list array & the driver code will print the tree in pre-order tree traversal in lexicographically increasing order.

Solution:

class Solution {
  public:
    vector<Node*> printAllDups(Node* root) {
unordered_map<string, vector<Node*>> lookup;
        serialize(root, lookup);
        vector<Node*> result;
        for (auto &entry : lookup) {
            if (entry.second.size() > 1) {
                result.push_back(entry.second[0]);
            }
        }
        return result;
    }
    private:
    string serialize(Node* node, unordered_map<string, vector<Node*>> &lookup) {
        if (!node) return "#";
        string serial = to_string(node->data) + "," + serialize(node->left, lookup) + "," + serialize(node->right, lookup);
        lookup[serial].push_back(node);
      return serial;
    }
 
};
