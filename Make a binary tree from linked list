Given a Linked List Representation of Complete Binary Tree. The task is to construct the Binary tree and print the level order traversal of the Binary tree. 
Note: The complete binary tree is represented as a linked list in a way where if the root node is stored at position i, its left, and right children are stored at position 2*i+1, and 2*i+2 respectively. H is the height of the tree and this space is used implicitly for the recursion stack.
Examples:
Input: n = 5, k = 1->2->3->4->5
Output: 1 2 3 4 5

Solution:

void convert(Node *head, TreeNode *&root) {
        if (head == NULL) {
        root = NULL;
        return;
    }

    // Initialize the queue to hold the tree nodes.
    queue<TreeNode*> q;

    // Create the root of the tree
    root = new TreeNode(head->data);
    q.push(root);

    // Pointer to traverse the linked list.
    Node* curr = head->next;

    // Loop until there are nodes in the linked list.
    while (curr) {
        // Get the front of the queue.
        TreeNode* parent = q.front();
        q.pop();

        // Create the left child.
        TreeNode* leftChild = new TreeNode(curr->data);
        parent->left = leftChild;
        q.push(leftChild);

        // Move to the next node in the linked list.
        curr = curr->next;
        if (curr) {
            // Create the right child.
            TreeNode* rightChild = new TreeNode(curr->data);
            parent->right = rightChild;
            q.push(rightChild);

            // Move to the next node in the linked list.
            curr = curr->next;
        }
    }
}
